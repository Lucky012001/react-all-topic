useEffect is another React Hook used to handle side effects within functional components. 
Examples of side effects include network requests, DOM manipulation, timers, and event 
listeners.

When a component is rendered, the callback function of useEffect is executed. 
And when the component is unmounted, the cleanup function of useEffect is executed. 
If dependencies are provided as the second argument of useEffect, the callback 
function is executed only when the dependencies are updated.

The syntax for the useEffect hook is as follows:

useEffect(() => {
  // Callback function
  // Code to handle side effects
  return () => {
    // Cleanup function
  }
}, [dependencies])


In this syntax, the first argument of useEffect is the callback function that handles 
the side effects. In addition, the dependencies are passed as the second argument of 
useEffect, which determines whether the callback function depends on them or not.

With the useEffect hook, React developers have the flexibility and control similar to 
the lifecycle methods of class components, making functional components even more 
powerful than class components.

=======================================================================================

useEffect ek aur React Hook hai, jo functional components ke andar side effects ko 
handle karne ke liye use hota hai. Side effects ke examples hai network requests, 
DOM manipulation, timers, aur event listeners.

Jab component render hota hai, useEffect ka callback function run hota hai. Aur jab 
component unmount hota hai, useEffect ka cleanup function run hota hai. Agar useEffect 
ke second argument me kuch dependencies diye gaye hai, to callback function tabhi run 
hota hai jab dependencies update hote hai.

Syntax for useEffect hook:

useEffect(() => {
  // Callback function
  // Code to handle side effects
  return () => {
    // Cleanup function
  }
}, [dependencies])

Isme useEffect ke first argument me callback function diya jata hai, jo side effects 
ko handle karta hai. Iske sath-sath, useEffect ke second argument me dependencies diye 
jate hai, jisse callback function ke run hone par depend karta hai ya nahi.

useEffect hook ke sath-sath, React developers ko class components ke lifecycle methods 
ki tarah flexibility aur control milta hai, aur ye functional components ko class 
components se bhi powerful banata hai.
----------------------------------------------------------------------------------------

